package opgave4;public class ArrayBag<E> implements Bag<E> {    private final E[] bag;    private int count;    @SuppressWarnings("unchecked")    public ArrayBag() {        bag = (E[]) new Object[10];    }    @Override    public int getCurrentSize() {        return count;    }    @Override    public boolean isFull() {        return count == bag.length;    }    @Override    public boolean isEmpty() {        return count == 0;    }    @Override    public boolean add(E newEntry) {        if (isFull()) {            return false;        }        bag[count] = newEntry;        count++;        return true;    }    @Override    public E remove() {        if (isEmpty()) {            return null;        }        count--;        E temp = bag[count];        bag[count] = null;        return temp;    }    @Override    public boolean remove(E anEntry) {        for (int i = 0; i < count; i++) {            if (anEntry.equals(bag[i])) {                bag[i] = null;                count--;                return true;            }        }        return false;    }    @Override    public void clear() {        for (int i = 0; i < count; i++) {            bag[i] = null;        }        count = 0;    }    @Override    public int getFrequencyOf(E anEntry) {        int freq = 0;        for (int i = 0; i < count; i++) {            if (anEntry.equals(bag[i])) {                freq++;            }        }        return freq;    }    @Override    public boolean contains(E anEntry) {        return getFrequencyOf(anEntry) > 0;    }    @Override    @SuppressWarnings("unchecked")    public E[] toArray() {        E[] res = (E[]) new Object[count];        System.arraycopy(bag, 0, res, 0, count);        return res;    }}